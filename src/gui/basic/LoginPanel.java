/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui.basic;

import component.User;
import data.StaticInfo;

import com.mingJiang.gui.listener.TextFieldListener;
import com.mingJiang.gui.listener.ThreadAL;
import com.mingJiang.util.PanelUtil;

import java.awt.Desktop;
import java.awt.event.FocusEvent;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.logging.Level;
import java.util.logging.Logger;

import static data.StaticInfo.debug;
import xwy.XWYLogin;

import com.mingJiang.util.account.Account;
import com.mingJiang.util.account.Cookies;
import com.mingJiang.util.xml.TagElement;

import data.server.QQServer;
import data.server.ServerInfo;

import javax.swing.JTextField;
import javax.swing.SwingUtilities;

/**
 *
 * @author Ming Jiang
 */
public class LoginPanel extends BasicPanel {

    /**
     * Creates new form LoginPanel
     */
    public LoginPanel(MainPanel main) {
        super(main);
        initPanel(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        accLabel = new javax.swing.JLabel();
        passLabel = new javax.swing.JLabel();
        userName = new javax.swing.JComboBox();
        platform = new javax.swing.JComboBox();
        server = new javax.swing.JTextField();
        serverLabel = new javax.swing.JLabel();
        login = new javax.swing.JButton();
        webOpen = new javax.swing.JButton();
        saveInfo = new javax.swing.JCheckBox();
        urlLabel = new javax.swing.JLabel();
        warnLabel = new javax.swing.JLabel();
        password = new javax.swing.JPasswordField();
        reset = new javax.swing.JButton();
        url = new javax.swing.JComboBox();

        accLabel.setText("账号");

        passLabel.setText("密码");

        userName.setEditable(true);

        platform.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "腾讯", "新浪", "人人", "bilibili", "acfun", "9787", "facebook", "有妖气" }));

        server.setText("1");

        serverLabel.setText("区");

        login.setText("登陆");

        webOpen.setText("网页打开");

        saveInfo.setText("保存密码");

        urlLabel.setText("链接");

        warnLabel.setForeground(new java.awt.Color(153, 0, 51));
        warnLabel.setText("不要将链接发给他人");
        warnLabel.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        reset.setText("清空密码");

        url.setEditable(true);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(accLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(userName, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(passLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(password, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(saveInfo))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(reset)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(webOpen)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(platform, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(urlLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(url, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(warnLabel)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(server, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(serverLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(login, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(accLabel)
                    .addComponent(userName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(passLabel)
                    .addComponent(password, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(saveInfo))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(urlLabel)
                    .addComponent(url, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(warnLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(platform, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(server, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(login)
                        .addComponent(serverLabel))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(webOpen)
                        .addComponent(reset))))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel accLabel;
    private javax.swing.JButton login;
    private javax.swing.JLabel passLabel;
    private javax.swing.JPasswordField password;
    private javax.swing.JComboBox platform;
    private javax.swing.JButton reset;
    private javax.swing.JCheckBox saveInfo;
    private javax.swing.JTextField server;
    private javax.swing.JLabel serverLabel;
    private javax.swing.JComboBox url;
    private javax.swing.JLabel urlLabel;
    private javax.swing.JComboBox userName;
    private javax.swing.JLabel warnLabel;
    private javax.swing.JButton webOpen;
    // End of variables declaration//GEN-END:variables

    @Override
    protected void initComponent() {
        initComponents();
    }

    @Override
    protected void addListener() {
        userName.addFocusListener(new TextFieldListener());
        password.addFocusListener(new TextFieldListener());
        url.addFocusListener(new TextFieldListener());
        server.addFocusListener(new TextFieldListener() {
            @Override
            public void focusLost(FocusEvent e) {
//            	System.out.println("focus lost");
                selectServer();
            }
        });
        platform.addActionListener(new ThreadAL(new Runnable() {
            @Override
            public void run() {
                selectServer();
            }
        }));
        login.addActionListener(new ThreadAL(new Runnable() {
            @Override
            public void run() {
            	SwingUtilities.invokeLater(new Runnable(){
            		public void run(){
            			login();
            		}
            	});
                
            }
        }));
        webOpen.addActionListener(new ThreadAL(new Runnable() {
            @Override
            public void run() {
                openWeb();
            }
        }));
        reset.addActionListener(new ThreadAL(new Runnable() {
            @Override
            public void run() {
                resetStored();
            }
        }));

    }

    @Override
    public void readSerializedString(TagElement val) {
        TagElement data = val.get("login");
        if (data != null) {
            saveInfo.setSelected(data.getBoolVal("save"));
            server.setText(data.getVal("s"));
            platform.setSelectedIndex(data.getIntVal("p"));
            StaticInfo.debug("select server");
            selectServer();
        }
        StaticInfo.setMainUser(userName);
        StaticInfo.setUrl(url);
    }

    @Override
    public String toSerializedString() {
        return "<login>"
                + "<save>" + saveInfo.isSelected() + "</save>"
                + "<p>" + platform.getSelectedIndex() + "</p>"
                + "<s>" + server.getText() + "</s>"
                + "</login>";
    }

    @Override
    public void update() {
        main.update();
    }

    
    public void login() {
        try{
        login.setEnabled(false);
        User user = new User();
        selectServer();
        boolean urlSuc = false;

        String link = (String) url.getSelectedItem();
        //check link contain &serid=xx;
        // case 1 at the end, 
        //case 2 at middle;
        link = StaticInfo.server.parseUrl(link);
        String[] sp = link.split("----", 2);
        if (sp.length == 2) {
            user.setUname(sp[0]);
            user.getInfo().setUrl(sp[1]);
        } else {
            user.getInfo().setUrl(link);
        }
        String session = "";
        if (link.length() > 10) {//有连接
            setMsg("优先运行链接,");
            if(user.getInfo().getUrl().contains("PHPSESSID")){
        		String[] ssp = user.getInfo().getUrl().split("PHPSESSID=");
    	        // check PHPSESSID=
        		System.out.println(ssp[0]+" : "+ssp[1]);
    	        if(ssp.length==2){
    	            session = ssp[1].substring(0,ssp[1].indexOf("&")+1);
    	        }
    	        System.out.println(session);
        	}else
        		session = XWYLogin.getGameSessionKey(user.getInfo().getUrl());
            if (session.equals("")) {
                error("链接错误");
            } else {
                urlSuc = true;
            }
        }
        if (!urlSuc) {
            String acc = (String) userName.getSelectedItem();
            char[] tmp = password.getPassword();
            String pass = new String(tmp);
            for (int i = 0; i < tmp.length; i++) {
                tmp[i] = 0x00;
            }

            user.getInfo().setAcc(new Account(acc, pass, new Cookies()));
            if (acc.length() < 1 || pass.length() < 1) {
                error("请输入账号密码, 或者游戏链接.");
                login.setEnabled(true);
                return;
            }
            user.setNeedData(true);
            if (StaticInfo.login.login(user.getInfo().getAcc(), this) == 1) {
                error(user.getInfo().getAcc().getUser() + " 账号密码错误");
                login.setEnabled(true);
                return;
            }
            StaticInfo.successLogin(user.getInfo().getAcc());
            session = XWYLogin.getGameSessionKey(user) ? user.getInfo().getSessionKey() : "";
        }
        user.setSessionKey(session);
        user.login();
        int currentSize = url.getItemCount();
        if (urlSuc) {// success url
            if (sp.length != 2) { // unparsed url
                String u = url.getSelectedItem().toString();
                //     url.removeItemAt(url.getSelectedIndex());
                url.addItem(user.getUname() + "----" + u);
                url.setSelectedIndex(currentSize);
                JTextField textField = (JTextField) url.getEditor().getEditorComponent();
                textField.setCaretPosition(0);
            }
        } else {// get url from account
            url.addItem(user.getUname() + "----" + user.getInfo().getUrl());
            url.setSelectedIndex(currentSize);
        }
        StaticInfo.successURL(url.getSelectedItem().toString());

        setMsg("完成登录\n用户名: " + user.getUname());
        StaticInfo.registerUser(user);
        main.update();
        main.setEnabled(true);
        login.setEnabled(true);
        }catch(Exception e){
            e.printStackTrace();
            login.setEnabled(true);
        }
    }

    private void selectServer() {
        int p = platform.getSelectedIndex();
        int a = 1;
        try {
            a = Integer.parseInt(server.getText());
          //  System.out.println("server-"+a);
        } catch (NumberFormatException e) {
            error("区号错误。默认为1区");
            server.setText("1");
        }
        if (StaticInfo.registerPlatform(p, a)) {

        } else {
            server.setText(StaticInfo.server.getvSerid() + "");

            platform.setSelectedIndex(StaticInfo.server.platformConstant);
        }
    }

    private void openWeb() {
        String[] sp = url.getSelectedItem().toString().split("----", 2);
        if (sp.length == 2) {
            openWeb(sp[1]);
        } else {
            openWeb(sp[0]);
        }
    }

    private void openWeb(String string) {
        if (Desktop.isDesktopSupported()) {
            try {
                Desktop.getDesktop().browse(new URI(string));
            } catch (IOException ex) {
                debug(ex.getMessage());
            } catch (URISyntaxException ex) {
                debug("链接错误");
            }
        }
    }

    private void resetStored() {
        if (PanelUtil.showComfirmation("确定删除数据？ %d秒后取消", this, 5)) {//确定
            setMsg("删除保存账号");
            userName.removeAllItems();
            url.removeAllItems();
            StaticInfo.passwords.clear();
            StaticInfo.urls.clear();
            password.setText("");
        } else {
            error("取消删除");
        }
    }

}

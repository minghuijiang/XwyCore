/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui.basic;

import com.mingJiang.dataType.refPrimitive.Ref;
import com.mingJiang.util.xml.TagElement;
import com.mingJiang.gui.listener.CheckBoxListener;
import com.mingJiang.gui.listener.IntListener;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.text.BadLocationException;
import javax.swing.text.Document;
import javax.swing.text.Style;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyledDocument;

/**
 *
 * @author Ming Jiang
 */
public class MessagePanel extends BasicPanel {

    /**
     * Creates new form MessagePanel
     */
    public MessagePanel() {
        initPanel(true);
     //   setStyle();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scroll = new javax.swing.JScrollPane();
        message = new javax.swing.JTextArea();
        showMsg = new javax.swing.JCheckBox();
        showDetail = new javax.swing.JCheckBox();
        showRev = new javax.swing.JCheckBox();
        chopMsg = new javax.swing.JCheckBox();
        charSize = new javax.swing.JTextField();
        lengLabel = new javax.swing.JLabel();
        clear = new javax.swing.JButton();

        setFont(new java.awt.Font("KaiTi", 0, 14)); // NOI18N

        message.setColumns(20);
        message.setRows(5);
        scroll.setViewportView(message);

        showMsg.setFont(getFont());
        showMsg.setSelected(true);
        showMsg.setText("信息");

        showDetail.setFont(getFont());
        showDetail.setSelected(true);
        showDetail.setText("细节");

        showRev.setFont(getFont());
        showRev.setSelected(true);
        showRev.setText("逆显示");

        chopMsg.setFont(getFont());
        chopMsg.setSelected(true);
        chopMsg.setText("限制显示");

        charSize.setFont(getFont());
        charSize.setText("80000");

        lengLabel.setFont(getFont());
        lengLabel.setText("字数");

        clear.setFont(getFont());
        clear.setText("清空");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(showMsg)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(showDetail)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chopMsg)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lengLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(charSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(showRev)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(clear)
                .addGap(0, 23, Short.MAX_VALUE))
            .addComponent(scroll)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(showMsg)
                    .addComponent(showDetail)
                    .addComponent(showRev)
                    .addComponent(chopMsg)
                    .addComponent(charSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lengLabel)
                    .addComponent(clear))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scroll, javax.swing.GroupLayout.PREFERRED_SIZE, 339, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField charSize;
    private javax.swing.JCheckBox chopMsg;
    private javax.swing.JButton clear;
    private javax.swing.JLabel lengLabel;
    private javax.swing.JTextArea message;
    private javax.swing.JScrollPane scroll;
    private javax.swing.JCheckBox showDetail;
    private javax.swing.JCheckBox showMsg;
    private javax.swing.JCheckBox showRev;
    // End of variables declaration//GEN-END:variables

    private final Ref<Integer> length= new Ref<>(80000);// character reduce threadhold
    public static Style errorStyle,logStyle;
    
    public static void registerStyle(Style error, Style log){
        errorStyle = error;
        logStyle = log;
    }
    
    @Override
    protected void initComponent() {
        initComponents();
    }

    @Override
    protected void addListener() {
        chopMsg.addItemListener(new CheckBoxListener(charSize));
        clear.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e) {
                message.setText("");
            }
        });
        charSize.addFocusListener(new IntListener(length,8000));
    }

    @Override
    public void readSerializedString(TagElement val) {
        TagElement data = val.get("messagePanel");
        if(data!=null){
            
            showMsg.setSelected(data.getBoolVal("msg"));
            showDetail.setSelected(data.getBoolVal("detail"));
            showRev.setSelected(data.getBoolVal("rev"));
            chopMsg.setSelected(data.getBoolVal("limit"));
            int size = data.getIntVal("size");
            length.setVal(size);
            charSize.setText(size+"");
        }
    }

    @Override
    public String toSerializedString() {
        return "<messagePanel>"
                + "<msg>" + showMsg.isSelected() + "</msg>"
                + "<detail>" + showDetail.isSelected() + "</detail>"
                + "<rev>" + showRev.isSelected() + "</rev>"
                + "<limit>" + chopMsg.isSelected() + "</limit>"
                + "<size>" + charSize.getText() + "</size>"
             + "</messagePanel>";
    }

    @Override
    public void update() {
       charSize.setEnabled(chopMsg.isEnabled());
    }


    @Override
    public void setMsg(String msg) {
        if (showMsg.isSelected()) {
            setMsg("MSG: "+msg, null);
        } 
        System.out.println("MSG: "+msg);
    }
  @Override
    public void log(String log) {
        if (showMsg.isSelected()&&showDetail.isSelected()) {
            setMsg("LOG: "+log, null);
        }
        System.out.println("LOG: "+log);
    }

    /**
     * always show error
     */
    @Override
    public void error(String error) {
        setMsg("ERR: "+error, null);
        System.out.println("ERR:"+error);
    }

    private void setMsg(String msg, Style style) {
        Document doc = message.getDocument();
        if (chopMsg.isSelected()) {
            reduceMsg(doc);
        }
        if (doc != null) {
            try {
                if (showRev.isSelected()) {
                    doc.insertString(0, msg+"\n", style);
                } else {
                    doc.insertString(doc.getLength(), msg+"\n", style);
                }
            } catch (BadLocationException e) {
            }
        }
        
    }

 
    private synchronized void reduceMsg(Document document) {

        if (document.getLength() >= length.getVal()) {
            try {
                if (showRev.isSelected()) {//reverse, so remove length()/2 to  last.
                    document.remove(length.getVal()/2, length.getVal()/2-1);
                    
                } else {// remove from 0 to length()/2
                    document.remove(0,  length.getVal()/2-1);
                }
            } catch (BadLocationException ex) {
            	error("删除信息失败 sync, length "+document.getLength()+"  offset "
            			+(int)(length.getVal()/2)+" len "+(int)(length.getVal()/2-1));
            	
            	ex.printStackTrace();
               	try {
    					document.remove(0, document.getLength());
    				} catch (BadLocationException e) {
    					// TODO Auto-generated catch block
    					e.printStackTrace();
    				}
            }
        }
    }
}
